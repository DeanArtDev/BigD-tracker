/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['UsersController_getUsers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получение общих данных о вошедшем в систему пользователе */
    get: operations['UsersController_me'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Регистрация пользователя
     * @description Возвращает access-token в теле и устанавливает refresh-token в cookie (HttpOnly)
     */
    post: operations['AuthController_register'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Обновление токена пользователя
     * @description Возвращает access-token в теле и устанавливает refresh-token в cookie (HttpOnly)
     */
    post: operations['AuthController_refresh'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Выход пользователя из системы */
    post: operations['AuthController_logout'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Вход пользователя в систему */
    post: operations['AuthController_login'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    MeDto: {
      id: number;
      screenName?: string;
      email: string;
      /** @example /some-hash.png */
      avatar?: string;
      /** @example [
       *       "admin",
       *       "user",
       *       "moderator"
       *     ] */
      roles?: string[];
      /**
       * Format: date-time
       * @example Thu May 15 2025 18:59:22 GMT+0000
       */
      createdAt: string;
      isVerified: boolean;
    };
    MeDtoResponse: {
      /** @description Ответ сервера */
      data: components['schemas']['MeDto'];
    };
    RegisterRequest: {
      /** @example example@example.com */
      login: string;
      /** @example 1234567 */
      password: string;
    };
    RegisterDto: {
      /** @example jwt token is here */
      token: string;
    };
    RegisterResponse: {
      /** @description Ответ сервера */
      data: components['schemas']['RegisterDto'];
    };
    RefreshDto: {
      /** @example jwt token is here */
      token: string;
    };
    RefreshResponse: {
      /** @description Ответ сервера */
      data: components['schemas']['RefreshDto'];
    };
    LogoutResponse: {
      /** @description Ответ сервера */
      data: boolean;
    };
    LoginRequest: {
      /** @example example@example.com */
      login: string;
      /** @example 1234567 */
      password: string;
    };
    LoginDto: {
      /** @example jwt token is here */
      token: string;
    };
    LoginResponse: {
      /** @description Ответ сервера */
      data: components['schemas']['LoginDto'];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  UsersController_getUsers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MeDtoResponse'];
        };
      };
    };
  };
  AuthController_register: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterRequest'];
      };
    };
    responses: {
      /** @description Пользователь успешно зарегистрирован */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RegisterResponse'];
        };
      };
    };
  };
  AuthController_refresh: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Токен успешно продлен */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RefreshResponse'];
        };
      };
    };
  };
  AuthController_logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Выход совершен успешно */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LogoutResponse'];
        };
      };
    };
  };
  AuthController_login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginRequest'];
      };
    };
    responses: {
      /** @description Вход совершен успешно */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LoginResponse'];
        };
      };
    };
  };
}
