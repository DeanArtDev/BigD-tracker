import { Kysely } from 'kysely';
import seeds from '../db/seeds';
import { DB } from '../src/shared/modules/db';
import { getDb } from './get-db';

export async function runSeeds() {
  const db = getDb();

  const scriptKey = process.argv[2];

  if (scriptKey) {
    const script = seeds.find(({ key }) => key === scriptKey);

    if (!script) {
      console.error(
        'C–∏–¥-—Å–∫—Ä–∏–ø—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É –Ω–µ –Ω–∞–π–¥–µ–Ω.',
        JSON.stringify(
          {
            givenKey: scriptKey,
            availableKeys: seeds.map(({ key }) => key),
          },
          null,
          2,
        ),
      );
      process.exit(1);
    }

    await runSeed(script, db);

    console.info(`‚úÖ –°–∏–¥ ${scriptKey} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!`);
  } else {
    let ranCount = 0;

    console.info('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–∏–¥–æ–≤...');
    for (const { target, seed } of seeds) {
      console.info(`‚è≥ –ó–∞–ø—É—Å–∫ —Å–∏–¥-—Å–∫—Ä–∏–ø—Ç–∞ ${target}...`);
      ranCount += 1;

      await seed(db);
    }

    if (ranCount === seeds.length) {
      console.info('‚úÖ –í—Å–µ —Å–∏–¥—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
    } else if (ranCount === 0) {
      console.info('ü§® –ù–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∏–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.');
    } else {
      console.info(`‚úÖ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${ranCount} —Å–∏–¥(-–∞, -–æ–≤)!`);
    }
  }

  await db.destroy();
}

async function runSeed(script: (typeof seeds)[number], db: Kysely<DB>) {
  const { target, seed } = script;

  try {
    console.info(`‚è≥ –ó–∞–ø—É—Å–∫ —Å–∏–¥-—Å–∫—Ä–∏–ø—Ç–∞ ${target}...`);
    await seed(db);
  } catch (error) {
    console.error(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–∏–¥-—Å–∫—Ä–∏–ø—Ç–µ ${target}`, error);
    process.exit(1);
  }
}

runSeeds();
