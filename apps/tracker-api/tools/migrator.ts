import { join } from 'node:path';
import { FileMigrationProvider, Migrator } from 'kysely';
import { promises as fs } from 'fs';
import { getDb } from './get-db';

const actionMap = {
  up: 'migrateUp',
  down: 'migrateDown',
  lts: 'migrateToLatest',
};

async function migrate() {
  const db = getDb();
  const migrator = new Migrator({
    db,
    provider: new FileMigrationProvider({
      fs,
      path: { join },
      migrationFolder: join(__dirname, '../db/migrations'),
    }),
  });

  const actionKey = process.argv[2];
  const key = actionMap[actionKey];
  if (key == null) throw new Error('Wrong key, you can use [up, down, lts]');

  const { error, results } = await migrator[key]();

  results?.forEach((it) => {
    if (it.status === 'Success') {
      console.info(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${it.migrationName} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
    } else if (it.status === 'Error') {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ ${it.migrationName}`);
    }
  });

  if (error) {
    console.error('‚ùå –ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
    console.error(error);
    process.exit(1);
  } else {
    console.info('üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!');
  }

  await db.destroy();
}

migrate();
